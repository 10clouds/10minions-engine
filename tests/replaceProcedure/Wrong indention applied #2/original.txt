import * as admin from 'firebase-admin';
import { getAnalyticsManager } from './AnalyticsManager';
import { setOpenAICacheManager } from './OpenAICacheManager';

export class ConsumingOpenAICacheManager {
  private firestore: admin.firestore.Firestore | undefined;
  private cache: Record<string, string[]> = {};

  constructor(serviceAccount?: admin.ServiceAccount) {
    if (serviceAccount) {

      admin.initializeApp({
        credential: admin.credential.cert(serviceAccount),
      });
      this.firestore = admin.firestore();
    } else {
      this.firestore = undefined;
    }

    setOpenAICacheManager(this);
  }

  public async getCachedResult(requestData: object): Promise<string | undefined> {
    if (!this.firestore) {
      return undefined;
    }

    const requestDataHash = getAnalyticsManager().getRequestHash(requestData);
    
    if (this.cache[requestDataHash] && this.cache[requestDataHash].length > 0) {
      return this.cache[requestDataHash].shift(); 
    }

    const snapshot = await this.firestore.collection('openAICalls').where('requestDataHash', '==', requestDataHash).get();

    if (snapshot.empty) {
      return undefined;
    }

    snapshot.forEach((doc) => {
      if (typeof doc.data().responseData === "string") {
        if(this.cache[requestDataHash]) {
          this.cache[requestDataHash].push(doc.data().responseData as string);
        } else {
          this.cache[requestDataHash] = [doc.data().responseData as string];
        }
      }
    });

    return this.cache[requestDataHash].shift(); 
  }
}
