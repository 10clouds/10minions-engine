/*
```typescript
// In the EditorRange and EditorPosition classes, ensure that their constructors take two numbers as arguments respectively. If their constructors differ from what used here, then they should be modified or called with the correct arguments.
```
*/

/*
```typescript
// In the EditorDocument class, ensure that there are replace and insert methods that respectively replace a range with some new text and insert new text at a specific position. If those methods don't exist yet or their signatures differ from what used here, then they should be created or modified.
```
*/

import { MinionTask } from "../MinionTask";
import { EditorDocument, EditorRange, EditorUri, WorkspaceEdit, setEditorManager, EditorManager, EditorTextEdit, EditorPosition } from "../managers/EditorManager";
import fs, { readFileSync } from "fs";
import path from "path";
import { applyMinionTask } from "../strategies/utils/applyMinionTask";
import { setLogProvider } from "../managers/LogProvider";
import { setOpenAIApiKey } from "../openai";
import { OpenAICacheManager } from "../managers/OpenAICacheManager";
import { AnalyticsManager } from "../managers/AnalyticsManager";
import { setOriginalContentProvider } from "../managers/OriginalContentProvider";

// Assuming you're using node.js. Please use appropriate filesystem library if not in node.js environment
export class FileUri implements EditorUri {
  readonly fsPath: string;

  constructor(fsPath: string) {
    this.fsPath = fsPath;
  }

  toString(): string {
    return this.fsPath;
  }
}

setLogProvider({
  reportChange: (uri: string) => {}
});

setOriginalContentProvider({
  reportChange: (uri: string) => {}
});

class WorkspaceEditImplementation implements WorkspaceEdit {
  constructor(private _entries: string[] = []) {}

  replace(uri: EditorUri, range: EditorRange, newText: string) {
    this._entries.push(`replace: "${uri.toString()}", "${range.start.line}:${range.start.character}", "${range.end.line}:${range.end.character}", "${newText}"`);
  }

  insert(uri: EditorUri, position: EditorPosition, newText: string) {
    this._entries.push(`insert: "${uri.toString()}", "${position.line}:${position.character}", "${newText}"`);
  }

  entries() {
    return [] as [EditorUri, EditorTextEdit[]][];
  }
}


class TestEditorManager implements EditorManager {
  openDocuments: EditorDocument[] = [];

  applyWorkspaceEdit(fillEdit: (edit: WorkspaceEdit) => Promise<void>) {
    let edit = new WorkspaceEditImplementation();;
    fillEdit(edit);
    this.applyEdit(edit);
  }

  applyEdit(edit: WorkspaceEditImplementation) {
    // Loop through each entries
    edit.entries().forEach((command: string) => {
      // Parse the command
      const [action, uriString, rangeStr, text] = command.split(',').map((part) => part.trim().slice(1, -1));
      const uri = this.createUri(uriString)
    
      // Find or open the document to apply operation to
      const document = this.openTextDocument(uri);
    
      if (action === "replace") {
          // Parse the range string into start and end
          const [startStr, endStr] = rangeStr.split(':');
          const start = parseInt(startStr);
          const end = parseInt(endStr);
        
          // Replace the range in the document with the new text
          document.replace(new EditorRange(start, end), text);   
      } else if (action === "insert") {
          // Parse the position string into line and character
          const [lineStr, charStr] = rangeStr.split(':');
          const line = parseInt(lineStr);
          const character = parseInt(charStr);
        
          // Insert the new text into the document at the specified position
          document.insert(new EditorPosition(line, character), text);  
      }
    });
  }

  showInformationMessage (message: string) {
    
  }

  async openTextDocument (uri: EditorUri) {
    let existingDocument = this.openDocuments.find((doc) => doc.uri.fsPath === uri.fsPath)
    if (existingDocument) {
      return existingDocument;
    }

    let document = new MyEditorDocument(uri.fsPath);
    this.openDocuments.push(document);
    return document;
  }

  showErrorMessage (message: string): void {
    
  }

  createUri(uri: string): EditorUri {
    return {
      fsPath: uri,
      toString: () => uri
    };
  }
}

setEditorManager(new TestEditorManager());

const baseDir = path.resolve(__dirname);

setOpenAIApiKey(JSON.parse(readFileSync(path.resolve(baseDir, "openAIKey.json"), "utf8")).openAIKey);


const openAiCacheManager = new OpenAICacheManager(JSON.parse(readFileSync(path.resolve(baseDir, "serviceAccount.json"), "utf8")));
//const openAiCacheManager = new OpenAICacheManager();

const analyticsManager = new AnalyticsManager(
  "localTests-installationId",
  "VsCodeStub",
);
analyticsManager.setSendDiagnosticsData(true);

export class MyEditorDocument implements EditorDocument {
  readonly languageId: string;
  readonly lineCount: number;
  readonly uri: EditorUri;
  private _textLines: any[] = []; // This will store our text lines.
  private _numberLines: number[] = []; // This will store our line numbers.

  constructor(fileName: string) {
    this.uri = new FileUri(fileName);

    // Reading file contents synchronously for simplicity. Consider using async I/O in production code
    const fileContent = fs.readFileSync(fileName, "utf8");
    this._textLines = fileContent.split("\n");
    this.lineCount = this._textLines.length;

    // Derive languageId from file extension. This is simplistic and might not always be correct.
    this.languageId = path.extname(fileName).slice(1);

    // Populate _numberLines assuming 1-based line numbers
    this._numberLines = Array(this.lineCount)
      .fill(0)
      .map((_, i) => i + 1);
  }

  getText(range?: EditorRange): string {
    // Return joined text from _textLines array within given range or whole text if range is not provided
    return (range ? this._textLines.slice(range.start.line, range.end.line) : this._textLines).join("\n");
  }

  lineAt(line: number): {
    readonly text: string;
    readonly lineNumber: number;
  } {
    // Return object with text and line number from the given line
    return {
      text: this._textLines[line],
      lineNumber: this._numberLines[line],
    };
  }
}

async function run(): Promise<void> {
  console.log("Running tests...");

  let userQuery = `Junior zrobił PR do funkcjonalności, która na podstawie zawartości formularza sprawdza, czy użytkownikowi trzeba pokazać jakiś komunikat. Formularz ma dwa checkboxy (tu wymyślam jakie mają znaczenie, chodzi o to, żeby tknęło kandydata o słabe nazwy zmiennych). Kod działa poprawnie, bo był pisany pod okiem PO i ma testy. Robisz code review, zaproponuj zmiany.`;

  const execution = await MinionTask.create({
    userQuery,
    document: new MyEditorDocument(path.join(__dirname, "score", "code-review.js")),
    selection: { start: { line: 0, character: 0 }, end: { line: 0, character: 0 } },
    selectedText: "",
    minionIndex: 0,
    onChanged: async (important) => {
      console.log(".");
    },
  });

  await execution.run();

  applyMinionTask(execution);
  
  console.log("File contents");
  console.log("Done!");
}

const expectedOutput = `
function checkForm(req, res) {
    const { a, b } = getCheckboxValues(req);
    const showMessage = (a || b) && getInputValues(req).some(checkInput);
    res.send({ showMessage });
  }
`;

run();
