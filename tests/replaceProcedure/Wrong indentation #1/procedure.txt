I will start by creating a new function called `logToFile` that will be used to log messages to a file. This function will take two parameters: `logMessage` which is the message to be logged, and `logType` which will determine the type of log file to be written to. 

Next, I will replace all instances of `console.log` and `console.error` that are used for detailed logging with calls to the `logToFile` function. This will ensure that all detailed logs are written to the appropriate log files instead of being outputted to the console.

Finally, I will ensure that all log files are stored in a dedicated directory named "logs" for easier management. This will be done by specifying the path to the "logs" directory in the `logToFile` function.

Now, let's perform these modifications.

REPLACE
```typescript
import path from "path";
```
WITH
```typescript
import path from "path";
import fs from "fs";
```
END_REPLACE

INSERT
```typescript
function logToFile(logMessage: string, logType: 'log' | 'error' = 'log') {
    const filePath = path.join(__dirname, 'logs', `${logType}.log`)
    fs.appendFileSync(filePath, logMessage + '\n');
}
```
BEFORE
```typescript
async function gptAssert({ originalCode, resultingCode, mode = "FAST", assertion }: { originalCode: string; resultingCode: string; mode?: GptMode; assertion: string; }) {
```
END_INSERT

REPLACE
```typescript
console.log("File contents");
console.log(resultingCode);
```
WITH
```typescript
logToFile("File contents");
logToFile(resultingCode);
```
END_REPLACE

REPLACE
```typescript
console.error("\x1b[31m%s\x1b[0m", `Test failed: ${test.assertion}`);
console.error(`Comment: ${comment}`);
```
WITH
```typescript
logToFile(`Test failed: ${test.assertion}`, 'error');
logToFile(`Comment: ${comment}`, 'error');
```
END_REPLACE

REPLACE
```typescript
console.log("Done!");
```
WITH
```typescript
logToFile("Done!", 'log');
```
END_REPLACE

MODIFY_OTHER
Create a new directory named "logs" in the same directory as the script file to store the log files.
END_MODIFY_OTHER