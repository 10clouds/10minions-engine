First, I will add the import statement for the TypeScript module at the beginning of the file. Then, I will implement the `checkFunctionReturnType` function as described in the modification. This function will be inserted before the `runTest` function. 

Next, I will modify the `runTest` function to include a new condition for the `functionReturnTypeCheck` test type. This will involve replacing the existing `for` loop that iterates over the tests with an updated version that includes the new condition.

Let's proceed with these modifications.

INSERT
```ts
import * as ts from 'typescript';

async function checkFunctionReturnType({ code, functionName }: { code: string; functionName: string }): Promise<string> {
  try {
    // Create and compile program
    const program = ts.createSourceFile('temp.ts', code, ts.ScriptTarget.ES2017);
    const checker = program.getTypeChecker();

    const funcSym = checker.resolveName(functionName, undefined, ts.SymbolFlags.FunctionScoped, false);
    if (!funcSym) {
      throw new Error(`Function '${functionName}' not found in code.`);
    }

    const typeOfFuncSym = checker.getTypeOfSymbolAtLocation(funcSym, funcSym.valueDeclaration);
    const returnType = checker.getReturnTypeOfSignature(typeOfFuncSym.getCallSignatures()[0]);

    return checker.typeToString(returnType);
  } catch (error) {
    logToFile(`Error during return type check: ${error.message}`);

    return "Error during return type check";
  }
}
```
BEFORE
```ts
async function runTest({ fileName, iterations = 5 }: { fileName: string; iterations?: number }) {
```
END_INSERT

REPLACE
```ts
for (let test of tests) {
      statistics.total++;

      if (test.type === "gptAssert") {
        let { passessTest, comment } = await gptAssert({ originalCode: execution.originalContent, resultingCode, assertion: test.assertion });
        logToFile(`Test: ${test.assertion}`);
        logToFile(`Comment: ${comment}`);

        if (!passessTest) {
          logToFile(`Test failed: ${test.assertion}`);
          logToFile(`Comment: ${comment}`);
        } else {
          statistics.passed++;
        }
      } else if (test.type === "simpleStringFind") {
        let passessTest = resultingCode.includes(test.stringToFind);
        logToFile(`Test: ${test.stringToFind}`);

        if (!passessTest) {
          logToFile(`Test failed: ${test.stringToFind}`);
        }
      }
}

```
WITH
```ts
for (let test of tests) {
  statistics.total++;

  if (test.type === "gptAssert") {
    // ...
  } else if (test.type === "simpleStringFind") {
    // ...
  } else if (test.type === "functionReturnTypeCheck") {
    let returnType = await checkFunctionReturnType({ code: resultingCode, functionName: test.functionName });
    logToFile(`Return type of function ${test.functionName}: ${returnType}`);

    if (returnType !== test.expectedType) {
      logToFile(`Test failed: The return type of function ${test.functionName} is not ${test.expectedType}`);
    } else {
      statistics.passed++;
    }
  }
}
```
END_REPLACE