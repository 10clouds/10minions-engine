import * as vscode from "vscode";
import { MinionTasksManager } from "./MinionTasksManager";
import * as fs from 'fs';

class TodoCodeLensProvider implements vscode.CodeLensProvider {
  public provideCodeLenses(document: vscode.TextDocument): vscode.CodeLens[] {
    const todoPattern = /\/\/\s*TODO: (.*)/;
    const todoLocations = [];
    for (let lineNum = 0; lineNum < document.lineCount; lineNum++) {
      const lineOfText = document.lineAt(lineNum);
      const match = todoPattern.exec(lineOfText.text);
      const todoMessage = match?.[1];
      if (match) {
        const range = new vscode.Range(new vscode.Position(lineNum, match.index), new vscode.Position(lineNum, match?.index + match[0].length));
        const todoCodeLens = new vscode.CodeLens(range, { command: "10minions.executeTask", title: "Execute task", arguments: [todoMessage] });
        todoLocations.push(todoCodeLens);
      }
    }
    return todoLocations;
  }

  public resolveCodeLens(codeLens: vscode.CodeLens): vscode.CodeLens {
    // Here simply return the given code lens as this function mainly enhance the code lens (e.g. with real executable commands) and we already injected the command in provideCodeLenses
    return codeLens;
  }
}

//TODO: Add a lot of logging to this class so it's easy to track what is going on.

export class MinionTaskAutoRunner {
  public static instance: MinionTaskAutoRunner;

  /**
   * Scan TypeScript files for TODO comments and output their path, line number, and text.
   */
  scanTODOComments(rootDir: string) {
    const tsFiles = fs.readdirSync(rootDir).filter((file) => path.extname(file) === ".ts");

    tsFiles.forEach((file: string) => {

      const lines = fs.readFileSync(path.join(rootDir, file)).toString().split("\n");

      lines.forEach((line: string, lineNumber: number) => {
        if (line.includes("//TODO:")) {
          const diagnostic = new vscode.Diagnostic(new vscode.Range(lineNumber, 0, lineNumber, 0), line.trim(), vscode.DiagnosticSeverity.Information);

          diagnostics.set(vscode.Uri.file(path.join(rootDir, file)), [diagnostic]);
        }
      });
    });
  }

  constructor(context: vscode.ExtensionContext) {
    this.monitorFilesForTasks();

    context.subscriptions.push(
      vscode.commands.registerCommand("10minions.executeTask", async (todoMessage: string) => {
        this.createMinionTaskForTaskComment(todoMessage.trim(), document, selection);
      })
    );

    context.subscriptions.push(vscode.languages.registerCodeLensProvider({ scheme: "file", language: "typescript" }, new TodoCodeLensProvider()));

    if (MinionTaskAutoRunner.instance) {
      throw new Error("ExecutionsManager already instantiated");
    }

    MinionTaskAutoRunner.instance = this;
  }

  private monitorFilesForTasks() {
    //TODO: Use the scan pattern to filter out files that we don't want to scan.
    let scanPattern = vscode.workspace.getConfiguration("10minions").get<string>("taskCommentScanPattern");

    //TOOD: Initially check for tasks in all files, make it slow, and throttled, so we don't kill the entire system.

    //TODO: Any changes to the file should cancel the timeout AND if the minion is working on this, it should cancel the minion as well.
  }

  private checkForTaskComments(document: vscode.TextDocument) {
    const taskCommentKeyword = vscode.workspace.getConfiguration("10minions").get<string>("taskCommentKeyword");

    if (!taskCommentKeyword || !document) {
      return;
    }

    const pattern = new RegExp(`(${taskCommentKeyword}: .*)`, "g");
    const lines = document.getText().split("\n");
  }

  /*
   const selectionStart = Math.max(0, lineNumber - 10);
        const selectionEnd = Math.min(lines.length, lineNumber + 20 + 1);
        const selection = new vscode.Selection(selectionStart, 0, selectionEnd, 0);
        */

  private createMinionTaskForTaskComment(task: string, document: vscode.TextDocument, selection: vscode.Selection) {
    const existingTask = MinionTasksManager.instance.getExecutionByUserQueryAndDoc(task, document);

    if (!existingTask) {
      // The message shown can be modified accordingly
      // Added clickable button to the vscode.window.showInformationMessage
      vscode.window
        .showInformationMessage(
          "The task is being executed: " + task,
          {
            modal: true,
          },
          {
            title: "Go to Task", // This is the clickable button
          }
        )
        .then((clicked) => {
          // Contains the action performed when the button is clicked
          if (clicked?.title === "Go to Task") {
            // Add the action you want to perform when the go to task button is clicked
            vscode.workspace
              .openTextDocument(document.uri) // Opens up the document where the task is located
              .then((doc) => {
                vscode.window.showTextDocument(doc); // Display the newly opened document to the user
              });
          }
        });

      MinionTasksManager.instance.runMinionOnCurrentSelectionAndEditor(task, document, selection);
    }
  }
}
